
import numpy as np
import matplotlib.pyplot as plt

exec(open("python_plots/src_power_spectrum/reading_data_power_spectrum.py").read())
exec(open("python_plots/src_power_spectrum/reading_data_matter_power_spectrum.py").read())
exec(open("python_plots/src_power_spectrum/reading_data_transfer_function.py").read())


# plt.plot(x_axis_values, C_l_data_hw, color = "#fe89c8")
# plt.vlines(220, ymin = -1000, ymax = 8000, color = "#bbbbbb", linestyle = "dashed")
# # plt.vlines(200, ymin = 0, ymax =3*(10**3), color = "#bbbbbb", linestyle = "dashed")
# # plt.axhline(y = 4*(10**2), color = "#bbbbbb", linestyle = "dashed", zorder = 1)
# plt.xscale("log")
# plt.yscale("log")
# plt.xlabel("Multipole $\ell$", fontsize = 13)
# plt.ylabel("$\\frac{\ell(\ell+1)}{2\pi}C_\ell^{TT}$", fontsize = 13)
# plt.xticks(fontsize = 12)
# plt.yticks(fontsize = 12)
# # plt.savefig("python_plots/plots/power_spectrum/power_spectrum_hw_comparison.pdf")
# plt.show()

# plt.figure(figsize = (17,11))
# plt.plot(x_axis_values, C_l_data_all_sf_terms_student, color = "#ff0f7f", label = "All terms in source function")
# plt.plot(x_axis_values, C_l_data_first_sf_term_student, color = "#fc8eac", label = "First term")
# plt.plot(x_axis_values, C_l_data_second_sf_term_student, color = "#c154c1", label = "Second term")
# plt.plot(x_axis_values, C_l_data_third_sf_term_student, color = "#a94064", label = "Third term")
# plt.plot(x_axis_values, C_l_data_fourth_sf_term_student, color = "#fe5bac", label = "Fourth term")
# plt.legend(loc = "lower right", fontsize = 16)
# plt.xticks(fontsize = 17)
# plt.yticks(fontsize = 17)
# plt.xlabel("Multipole $\ell$", fontsize = 16)
# plt.ylabel("$\\frac{\ell(\ell+1)}{2\pi}C_\ell^{TT}$", fontsize = 22)
# plt.xscale("log")
# plt.yscale("log")
# # plt.savefig("cmb_test.pdf")
# plt.show()

# plt.figure(figsize = (12,8))
# plt.plot(x_axis_values, C_l_data_all_sf_terms_student, color = "#4b006e")
# low_TT_errors = [low_TT_C_l_err_up, low_TT_C_l_err_down]
# high_TT_errors = [high_TT_C_l_err_up, high_TT_C_l_err_down]
# # plt.vlines(220, ymin = -1000, ymax = 8000, color = "#bbbbbb", linestyle = "dashed")
# plt.errorbar(low_TT_ell_values, low_TT_C_l_data, low_TT_errors, fmt = "x", color = "#d9328a", markersize = "4",  capsize = 6)
# plt.errorbar(high_TT_ell_values, high_TT_C_l_data, high_TT_errors, fmt = "x", color = "#d9328a", markersize = "4", capsize =4)
# plt.xscale("log")
# plt.ylim(-1000, 8000)
# plt.xlim(2, 2*(10**3))
# plt.xlabel("Multipole $\ell$", fontsize = 16)
# plt.ylabel("$\\frac{\ell(\ell+1)}{2\pi}C_\ell^{TT}$", fontsize = 16)
# plt.xticks(fontsize = 13)
# plt.yticks(fontsize = 13)
# # plt.savefig("python_plots/plots/cmb_power_spectrum_student.pdf")
# plt.show()

# # EE and TE spectra
# fig, ax = plt.subplots(2,1, figsize = (8,12))
# ax[0].plot(x_axis_values, EE_data_all_sf_terms_student, color = "#4b006e", label = "Theoretical prediction")
# adjusted_high_EE_C_l_data = (2*np.pi)/((high_EE_ell_values*(high_EE_ell_values+1))) * high_EE_C_l_data / 1e-5
# adjusted_high_EE_C_l_err_up =  high_EE_C_l_err_up * (2*np.pi)/((high_EE_ell_values*(high_EE_ell_values+1))) / 1e-5
# adjusted_high_EE_C_l_err_down = high_EE_C_l_err_down * (2*np.pi)/((high_EE_ell_values*(high_EE_ell_values+1))) * 1e5
# high_EE_errors = [adjusted_high_EE_C_l_err_down, adjusted_high_EE_C_l_err_up]
# ax[0].errorbar(high_EE_ell_values, adjusted_high_EE_C_l_data, yerr = high_EE_errors, fmt = "x", markersize="3", capsize = 3, color = "#d9328a", label = "Planck 2018 data")
# ax[0].set_xlabel("Multipole $\ell$", fontsize = 14)
# ax[0].set_ylabel("$C_\ell^{EE}(10^{-5}\mu K^2)$", fontsize = 14)
# ax[0].legend(fontsize = 14)

# ax[1].plot(x_axis_values, TE_data_all_sf_terms_student, color = "#4b006e", label = "Theoretical prediction")
# high_TE_errors = [high_TE_C_l_err_down, high_TE_C_l_err_up]
# ax[1].errorbar(high_TE_ell_values, high_TE_C_l_data, yerr = high_TE_errors, fmt = "x", markersize="3", capsize = 3, color = "#d9328a", label = "Planck 2018 data")
# ax[1].set_xlabel("Multipole $\ell$", fontsize = 14)
# ax[1].set_ylabel("$\\frac{\ell(\ell+1)}{2\pi}C_\ell^{TE}(\mu K)^2$", fontsize = 14)
# ax[1].legend(fontsize = 14)
# # plt.savefig("python_plots/plots/power_spectrum/EE_and_TE_spectrum_student.pdf")
# plt.show()

# # Matter power spectrum
# plt.plot(x, y, color = "#d9328a", label = "Theoretical prediction")
# plt.errorbar(x_comp_cmb, y_comp_cmb, error_comp_cmb, fmt = "o", markersize = "5", color = "#c9a0dc", label = "Cosmic Microwave Background (WMAP+ACT)", capsize = 2)
# plt.errorbar(x_comp_galaxy_survey, y_comp_galaxy_survey, error_comp_galaxy_survey, fmt = "o", markersize = "5", color = "#f1b2e1", label = "SDSS Galaxies (DR7 LRG)", capsize = 2)
# plt.errorbar(x_comp_lyalpha, y_comp_lyalpha, error_comp_lyalpha, fmt = "o", markersize = "5", color = "#4b006e", label = "Lyman Alpha Forest", capsize = 2)
# # plt.vlines((1/112.888) / 0.67, ymin = 7e1, ymax = 4e4, color = "#808080", linestyle = "dashed")
# plt.vlines(0.0103782 / 0.67, ymin = 7e1, ymax = 4e4, color = "#808080", linestyle = "dashed")
# plt.xscale("log")
# plt.xscale("log")
# plt.yscale("log")
# plt.xlim(2e-3, 1e0)
# plt.ylim(7e1, 4e4)
# plt.xticks(fontsize = 11)
# plt.yticks(fontsize = 11)
# plt.xlabel ("k (h/Mpc)")
# plt.ylabel("P(k) $(\mathrm{h/Mpc})^3$")
# plt.legend()
# # plt.savefig("python_plots/plots/power_spectrum/matter_power_spectrum_student.pdf")
# plt.show()

# #Transfer function
# fig, ax = plt.subplots(2,1, figsize = (11,10))
# ax[0].plot(k_values, data_k_1, linewidth = 0.8, color = "#f8c8dc", label = "$\ell=7$")
# ax[0].plot(k_values, data_k_2, linewidth = 0.8, color = "#e6e6fa", label = "$\ell=225$")
# ax[0].plot(k_values, data_k_3, linewidth = 0.8, color = "#d1c4e9", label = "$\ell=650$")
# ax[0].plot(k_values, data_k_4, linewidth = 0.8, color = "#fadadd", label = "$\ell=1150$")
# ax[0].plot(k_values, data_k_5, linewidth = 0.8, color = "#cda4de", label = "$\ell=1650$")
# ax[0].set_xlim(0,3000)
# ax[0].tick_params(labelsize = 15)
# ax[0].set_xlabel("$k\eta_0$", fontsize = 16)
# ax[0].set_ylabel("$\Theta_\ell(k)$", fontsize = 16)
# ax[0].legend(fontsize = 13, loc = "lower right")

# ax[1].plot(k_values, data_k_1, linewidth = 0.8, color = "#f8c8dc", label = "$\ell=7$")
# ax[1].plot(k_values, data_k_2, linewidth = 0.8, color = "#e6e6fa", label = "$\ell=225$")
# ax[1].plot(k_values, data_k_3, linewidth = 0.8, color = "#d1c4e9", label = "$\ell=650$")
# ax[1].plot(k_values, data_k_4, linewidth = 0.8, color = "#fadadd", label = "$\ell=1150$")
# ax[1].plot(k_values, data_k_5, linewidth = 0.8, color = "#cda4de", label = "$\ell=1650$")
# ax[1].axvline(x = 7, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 6)
# ax[1].axvline(x = 225, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 7)
# ax[1].axvline(x = 650, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 8)
# ax[1].axvline(x = 1150, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 9)
# ax[1].axvline(x = 1650, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 10)
# ax[1].set_xlim(0,3000)
# ax[1].set_ylim(-0.00075, 0.00075)
# ax[1].tick_params(labelsize = 15)
# ax[1].legend(fontsize = 13, loc = "lower right")
# ax[1].set_xlabel("$k\eta_0$", fontsize = 16)
# ax[1].set_ylabel("$\Theta_\ell(k)$", fontsize = 16)
# # plt.savefig("python_plots/plots/power_spectrum/transfer_function_student.pdf")
# plt.show()


# Integrand |Theta_ell(k)|^2 / k
fig, ax = plt.subplots(2,1,figsize = (8,8))
ax[0].plot(k_values, 7*(7+1) * pow(data_k_1, 2), linewidth = 0.8, color = "#f8c8dc", label = "$\ell=7$")
ax[0].plot(k_values, 225*(225+1) * pow(data_k_2, 2), linewidth = 0.8, color = "#e6e6fa", label = "$\ell=225$")
ax[0].plot(k_values, 650*(650+1) * pow(data_k_3, 2), linewidth = 0.8, color = "#d1c4e9", label = "$\ell=650$")
ax[0].plot(k_values, 1150*(1150+1) * pow(data_k_4, 2), linewidth = 0.8, color = "#fadadd", label = "$\ell=1150$")
ax[0].plot(k_values, 1650*(1650+1) * pow(data_k_5, 2), linewidth = 0.8, color = "#cda4de", label = "$\ell=1650$")
ax[0].set_xlabel("$k\eta_0$", fontsize = 12)
ax[0].set_ylabel("$\ell(\ell+1)\Theta_\ell^{TT}$", fontsize = 12)
ax[0].set_ylim(0, 2)
plt.xticks(fontsize = 12)
plt.yticks(fontsize = 12)
ax[0].legend(fontsize = 11)


ax[1].plot(k_values, 7*(7+1) * pow(data_k_1, 2), linewidth = 0.8, color = "#f8c8dc", label = "$\ell=7$")
ax[1].plot(k_values, 225*(225+1) * pow(data_k_2, 2), linewidth = 0.8, color = "#e6e6fa", label = "$\ell=225$")
ax[1].plot(k_values, 650*(650+1) * pow(data_k_3, 2), linewidth = 0.8, color = "#d1c4e9", label = "$\ell=650$")
ax[1].plot(k_values, 1150*(1150+1) * pow(data_k_4, 2), linewidth = 0.8, color = "#fadadd", label = "$\ell=1150$")
ax[1].plot(k_values, 1650*(1650+1) * pow(data_k_5, 2), linewidth = 0.8, color = "#cda4de", label = "$\ell=1650$")
ax[1].set_xlabel("$k\eta_0$", fontsize = 12)
ax[1].set_ylabel("$\ell(\ell+1)\Theta_\ell^{TT}$", fontsize = 12)
ax[1].set_ylim(0, 0.06)
ax[1].legend(fontsize = 11)
ax[1].axvline(x = 7, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 6)
ax[1].axvline(x = 225, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 7)
ax[1].axvline(x = 650, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 8)
ax[1].axvline(x = 1150, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 9)
ax[1].axvline(x = 1650, linestyle = "dashed", color = "#808080", linewidth = 0.8, zorder = 10)
plt.xticks(fontsize = 12)
plt.yticks(fontsize = 12)
plt.savefig("python_plots/plots/power_spectrum/integrand_C_l_student.pdf")
plt.show()
